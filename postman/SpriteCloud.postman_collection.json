{
	"info": {
		"_postman_id": "4f1ddd61-4be4-46b9-ba49-2178ee655456",
		"name": "SpriteCloud",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25706914"
	},
	"item": [
		{
			"name": "Retrieve a list of users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify a list of users is displayed\", function(){",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;",
							"    pm.expect(jsonData.data.length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Verify there are 6 users per page\", function(){",
							"    pm.expect(pm.response.json().data.length).to.equal(6);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}users?page=1",
					"host": [
						"{{baseUrl}}users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Perform a successful login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - token\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.token).to.exist;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}login",
					"host": [
						"{{baseUrl}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Perform an update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"}),",
							"",
							"pm.test(\"Update was successful\", function (){",
							"    pm.expect(pm.response.json().name).to.equal(\"morpheus\")",
							"    pm.expect(pm.response.json().job).to.equal(\"zion resident\");",
							"    pm.expect(pm.response.json().updatedAt).to.exist;",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}users/2",
					"host": [
						"{{baseUrl}}users"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Perform a deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"Verify user is deleted\", function(){",
							"    pm.expect(pm.response.json.data).to.not.exist;",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}users/2",
					"host": [
						"{{baseUrl}}users"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\"), function(){",
							"    pm.expect(pm.response.status(400))",
							"}",
							"",
							"pm.test(\"Verify password is missing\", function () {",
							"    pm.expect(pm.response.json().error).to.eql(\"Missing password\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"sydney@fife\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}register",
					"host": [
						"{{baseUrl}}register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single user not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Verify user is not found\", function(){",
							"      pm.expect(pm.response.json()).to.be.empty;",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}users/23",
					"host": [
						"{{baseUrl}}users"
					],
					"path": [
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delayed response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Read the delay parameter value from the environment",
							"const delay = parseInt(pm.collectionVariables.get(\"delaySeconds\"));",
							"",
							"// Log the expected delay (in seconds)",
							"console.log(`Expected delay: ${delay} seconds`);",
							"",
							"// Get the actual response time in milliseconds",
							"console.log(`Actual response time: ${pm.response.responseTime}ms`);",
							"",
							"// Validate that the response time is within the expected range:",
							"// It should be at least as long as the delay (converted to milliseconds)",
							"// and ideally not much more (allowing an extra 1000ms for overhead)",
							"pm.test(\"Response time is within expected range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.at.least(delay * 1000);",
							"    pm.expect(pm.response.responseTime).to.be.below((delay * 1000) + 1000);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}users?delay={{delaySeconds}}",
					"host": [
						"{{baseUrl}}users"
					],
					"query": [
						{
							"key": "delay",
							"value": "{{delaySeconds}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in/api/",
			"type": "string"
		},
		{
			"key": "delaySeconds",
			"value": "3",
			"type": "string"
		}
	]
}